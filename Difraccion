app.run(host="127.0.0.1", port=5001)


import numpy as np
import plotly.graph_objects as go
from ipywidgets import interact, FloatSlider

# Función para calcular las posiciones de la onda incidente y difractada
def wave_diffraction(theta_inc, phi_inc, wavelength, d_spacing):
    """
    Calcula las posiciones de las ondas incidente y difractada.
    
    theta_inc: Ángulo de incidencia (en grados) respecto al eje Z.
    phi_inc: Ángulo de incidencia azimutal (en grados).
    wavelength: Longitud de onda de la onda incidente.
    d_spacing: Espaciado entre planos del retículo.
    """
    theta_inc = np.radians(theta_inc)
    phi_inc = np.radians(phi_inc)
    
    # Vector de onda incidente
    k_inc = np.array([
        np.sin(theta_inc) * np.cos(phi_inc),
        np.sin(theta_inc) * np.sin(phi_inc),
        np.cos(theta_inc)
    ]) / wavelength
    
    # Vector recíproco del retículo (simplificado)
    g = np.array([0, 0, 1]) / d_spacing
    
    # Ley de difracción: k_dif = k_inc + G
    k_dif = k_inc + g
    
    return k_inc, k_dif

# Función para representar las ondas en 3D
def plot_diffraction(theta_inc, phi_inc, wavelength, d_spacing):
    """
    Representa la onda incidente y la onda difractada en 3D.
    """
    # Calcular vectores de onda
    k_inc, k_dif = wave_diffraction(theta_inc, phi_inc, wavelength, d_spacing)
    
    # Crear figura
    fig = go.Figure()
    
    # Ejes
    fig.add_trace(go.Scatter3d(x=[0, 1], y=[0, 0], z=[0, 0], mode='lines', line=dict(color='black'), name='X'))
    fig.add_trace(go.Scatter3d(x=[0, 0], y=[0, 1], z=[0, 0], mode='lines', line=dict(color='black'), name='Y'))
    fig.add_trace(go.Scatter3d(x=[0, 0], y=[0, 0], z=[0, 1], mode='lines', line=dict(color='black'), name='Z'))
    
    # Onda incidente
    fig.add_trace(go.Scatter3d(
        x=[0, k_inc[0]], y=[0, k_inc[1]], z=[0, k_inc[2]],
        mode='lines+markers',
        line=dict(color='blue', width=5),
        marker=dict(size=4, color='blue'),
        name='Onda incidente'
    ))
    
    # Onda difractada
    fig.add_trace(go.Scatter3d(
        x=[0, k_dif[0]], y=[0, k_dif[1]], z=[0, k_dif[2]],
        mode='lines+markers',
        line=dict(color='red', width=5),
        marker=dict(size=4, color='red'),
        name='Onda difractada'
    ))
    
    # Configuración del gráfico
    fig.update_layout(
        title=f'Difracción de la onda (θ_inc: {theta_inc:.1f}°, φ_inc: {phi_inc:.1f}°, λ: {wavelength}, d: {d_spacing})',
        scene=dict(
            xaxis=dict(title='X'),
            yaxis=dict(title='Y'),
            zaxis=dict(title='Z')
        ),
        margin=dict(l=0, r=0, b=0, t=40)
    )
    
    fig.show()

# Widget interactivo
interact(
    plot_diffraction,
    theta_inc=FloatSlider(value=45, min=0, max=90, step=1, description="Ángulo θ_inc (°):"),
    phi_inc=FloatSlider(value=0, min=0, max=360, step=1, description="Ángulo φ_inc (°):"),
    wavelength=FloatSlider(value=1, min=0.1, max=5, step=0.1, description="Longitud de onda λ:"),
    d_spacing=FloatSlider(value=2, min=0.5, max=5, step=0.1, description="Espaciado d:")
)
